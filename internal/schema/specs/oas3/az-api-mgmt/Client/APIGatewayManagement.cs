// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Apimanagement
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Net;
    using System.Net.Http;

    /// <summary>
    /// Use these REST APIs for performing operations on entities like API,
    /// Product, and Subscription associated with your Azure API Management
    /// deployment.
    /// </summary>
    public partial class APIGatewayManagement : ServiceClient<APIGatewayManagement>, IAPIGatewayManagement
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        public System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public JsonSerializerSettings SerializationSettings { get; private set; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public JsonSerializerSettings DeserializationSettings { get; private set; }

        /// <summary>
        /// Version of the API to be used with the client request.
        /// </summary>
        public string ApiVersion { get; set; }

        /// <summary>
        /// Subscription credentials which uniquely identify Microsoft Azure
        /// subscription. The subscription ID forms part of the URI for every service
        /// call.
        /// </summary>
        public string SubscriptionId { get; set; }

        /// <summary>
        /// Gets the IApi.
        /// </summary>
        public virtual IApi Api { get; private set; }

        /// <summary>
        /// Gets the IApiRevision.
        /// </summary>
        public virtual IApiRevision ApiRevision { get; private set; }

        /// <summary>
        /// Gets the IApiRelease.
        /// </summary>
        public virtual IApiRelease ApiRelease { get; private set; }

        /// <summary>
        /// Gets the IApiOperation.
        /// </summary>
        public virtual IApiOperation ApiOperation { get; private set; }

        /// <summary>
        /// Gets the IApiOperationPolicy.
        /// </summary>
        public virtual IApiOperationPolicy ApiOperationPolicy { get; private set; }

        /// <summary>
        /// Gets the ITag.
        /// </summary>
        public virtual ITag Tag { get; private set; }

        /// <summary>
        /// Gets the IApiProduct.
        /// </summary>
        public virtual IApiProduct ApiProduct { get; private set; }

        /// <summary>
        /// Gets the IApiPolicy.
        /// </summary>
        public virtual IApiPolicy ApiPolicy { get; private set; }

        /// <summary>
        /// Gets the IApiSchema.
        /// </summary>
        public virtual IApiSchema ApiSchema { get; private set; }

        /// <summary>
        /// Gets the IApiDiagnostic.
        /// </summary>
        public virtual IApiDiagnostic ApiDiagnostic { get; private set; }

        /// <summary>
        /// Gets the IApiIssue.
        /// </summary>
        public virtual IApiIssue ApiIssue { get; private set; }

        /// <summary>
        /// Gets the IApiIssueComment.
        /// </summary>
        public virtual IApiIssueComment ApiIssueComment { get; private set; }

        /// <summary>
        /// Gets the IApiIssueAttachment.
        /// </summary>
        public virtual IApiIssueAttachment ApiIssueAttachment { get; private set; }

        /// <summary>
        /// Gets the IApiTagDescription.
        /// </summary>
        public virtual IApiTagDescription ApiTagDescription { get; private set; }

        /// <summary>
        /// Gets the IOperationOperations.
        /// </summary>
        public virtual IOperationOperations Operation { get; private set; }

        /// <summary>
        /// Gets the IApiExport.
        /// </summary>
        public virtual IApiExport ApiExport { get; private set; }

        /// <summary>
        /// Gets the IApiVersionSet.
        /// </summary>
        public virtual IApiVersionSet ApiVersionSet { get; private set; }

        /// <summary>
        /// Gets the IAuthorizationServer.
        /// </summary>
        public virtual IAuthorizationServer AuthorizationServer { get; private set; }

        /// <summary>
        /// Gets the IBackend.
        /// </summary>
        public virtual IBackend Backend { get; private set; }

        /// <summary>
        /// Gets the ICache.
        /// </summary>
        public virtual ICache Cache { get; private set; }

        /// <summary>
        /// Gets the ICertificate.
        /// </summary>
        public virtual ICertificate Certificate { get; private set; }

        /// <summary>
        /// Gets the IContentType.
        /// </summary>
        public virtual IContentType ContentType { get; private set; }

        /// <summary>
        /// Gets the IContentTypes.
        /// </summary>
        public virtual IContentTypes ContentTypes { get; private set; }

        /// <summary>
        /// Gets the IContentItem.
        /// </summary>
        public virtual IContentItem ContentItem { get; private set; }

        /// <summary>
        /// Gets the IApiManagementOperations.
        /// </summary>
        public virtual IApiManagementOperations ApiManagementOperations { get; private set; }

        /// <summary>
        /// Gets the IApiManagementServiceSkus.
        /// </summary>
        public virtual IApiManagementServiceSkus ApiManagementServiceSkus { get; private set; }

        /// <summary>
        /// Gets the IApiManagementService.
        /// </summary>
        public virtual IApiManagementService ApiManagementService { get; private set; }

        /// <summary>
        /// Gets the IDiagnostic.
        /// </summary>
        public virtual IDiagnostic Diagnostic { get; private set; }

        /// <summary>
        /// Gets the IEmailTemplate.
        /// </summary>
        public virtual IEmailTemplate EmailTemplate { get; private set; }

        /// <summary>
        /// Gets the IGateway.
        /// </summary>
        public virtual IGateway Gateway { get; private set; }

        /// <summary>
        /// Gets the IGatewayHostnameConfiguration.
        /// </summary>
        public virtual IGatewayHostnameConfiguration GatewayHostnameConfiguration { get; private set; }

        /// <summary>
        /// Gets the IGatewayApi.
        /// </summary>
        public virtual IGatewayApi GatewayApi { get; private set; }

        /// <summary>
        /// Gets the IGroup.
        /// </summary>
        public virtual IGroup Group { get; private set; }

        /// <summary>
        /// Gets the IGroupUser.
        /// </summary>
        public virtual IGroupUser GroupUser { get; private set; }

        /// <summary>
        /// Gets the IIdentityProvider.
        /// </summary>
        public virtual IIdentityProvider IdentityProvider { get; private set; }

        /// <summary>
        /// Gets the IIssue.
        /// </summary>
        public virtual IIssue Issue { get; private set; }

        /// <summary>
        /// Gets the ILogger.
        /// </summary>
        public virtual ILogger Logger { get; private set; }

        /// <summary>
        /// Gets the INamedValue.
        /// </summary>
        public virtual INamedValue NamedValue { get; private set; }

        /// <summary>
        /// Gets the INetworkStatus.
        /// </summary>
        public virtual INetworkStatus NetworkStatus { get; private set; }

        /// <summary>
        /// Gets the INotification.
        /// </summary>
        public virtual INotification Notification { get; private set; }

        /// <summary>
        /// Gets the INotificationRecipientUser.
        /// </summary>
        public virtual INotificationRecipientUser NotificationRecipientUser { get; private set; }

        /// <summary>
        /// Gets the INotificationRecipientEmail.
        /// </summary>
        public virtual INotificationRecipientEmail NotificationRecipientEmail { get; private set; }

        /// <summary>
        /// Gets the IOpenIdConnectProvider.
        /// </summary>
        public virtual IOpenIdConnectProvider OpenIdConnectProvider { get; private set; }

        /// <summary>
        /// Gets the IPolicy.
        /// </summary>
        public virtual IPolicy Policy { get; private set; }

        /// <summary>
        /// Gets the IPolicyDescription.
        /// </summary>
        public virtual IPolicyDescription PolicyDescription { get; private set; }

        /// <summary>
        /// Gets the ISignInSettings.
        /// </summary>
        public virtual ISignInSettings SignInSettings { get; private set; }

        /// <summary>
        /// Gets the ISignUpSettings.
        /// </summary>
        public virtual ISignUpSettings SignUpSettings { get; private set; }

        /// <summary>
        /// Gets the IDelegationSettings.
        /// </summary>
        public virtual IDelegationSettings DelegationSettings { get; private set; }

        /// <summary>
        /// Gets the IProduct.
        /// </summary>
        public virtual IProduct Product { get; private set; }

        /// <summary>
        /// Gets the IProductApi.
        /// </summary>
        public virtual IProductApi ProductApi { get; private set; }

        /// <summary>
        /// Gets the IProductGroup.
        /// </summary>
        public virtual IProductGroup ProductGroup { get; private set; }

        /// <summary>
        /// Gets the IProductSubscriptions.
        /// </summary>
        public virtual IProductSubscriptions ProductSubscriptions { get; private set; }

        /// <summary>
        /// Gets the IProductPolicy.
        /// </summary>
        public virtual IProductPolicy ProductPolicy { get; private set; }

        /// <summary>
        /// Gets the IQuotaByCounterKeys.
        /// </summary>
        public virtual IQuotaByCounterKeys QuotaByCounterKeys { get; private set; }

        /// <summary>
        /// Gets the IQuotaByPeriodKeys.
        /// </summary>
        public virtual IQuotaByPeriodKeys QuotaByPeriodKeys { get; private set; }

        /// <summary>
        /// Gets the IRegion.
        /// </summary>
        public virtual IRegion Region { get; private set; }

        /// <summary>
        /// Gets the IReports.
        /// </summary>
        public virtual IReports Reports { get; private set; }

        /// <summary>
        /// Gets the ISubscription.
        /// </summary>
        public virtual ISubscription Subscription { get; private set; }

        /// <summary>
        /// Gets the ITagResource.
        /// </summary>
        public virtual ITagResource TagResource { get; private set; }

        /// <summary>
        /// Gets the ITenantAccess.
        /// </summary>
        public virtual ITenantAccess TenantAccess { get; private set; }

        /// <summary>
        /// Gets the ITenantAccessGit.
        /// </summary>
        public virtual ITenantAccessGit TenantAccessGit { get; private set; }

        /// <summary>
        /// Gets the ITenantConfiguration.
        /// </summary>
        public virtual ITenantConfiguration TenantConfiguration { get; private set; }

        /// <summary>
        /// Gets the IUser.
        /// </summary>
        public virtual IUser User { get; private set; }

        /// <summary>
        /// Gets the IUserGroup.
        /// </summary>
        public virtual IUserGroup UserGroup { get; private set; }

        /// <summary>
        /// Gets the IUserSubscription.
        /// </summary>
        public virtual IUserSubscription UserSubscription { get; private set; }

        /// <summary>
        /// Gets the IUserIdentities.
        /// </summary>
        public virtual IUserIdentities UserIdentities { get; private set; }

        /// <summary>
        /// Gets the IUserConfirmationPassword.
        /// </summary>
        public virtual IUserConfirmationPassword UserConfirmationPassword { get; private set; }

        /// <summary>
        /// Initializes a new instance of the APIGatewayManagement class.
        /// </summary>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling APIGatewayManagement.Dispose(). False: will not dispose provided httpClient</param>
        public APIGatewayManagement(HttpClient httpClient, bool disposeHttpClient) : base(httpClient, disposeHttpClient)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the APIGatewayManagement class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public APIGatewayManagement(params DelegatingHandler[] handlers) : base(handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the APIGatewayManagement class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public APIGatewayManagement(HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : base(rootHandler, handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the APIGatewayManagement class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public APIGatewayManagement(System.Uri baseUri, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the APIGatewayManagement class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public APIGatewayManagement(System.Uri baseUri, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// An optional partial-method to perform custom initialization.
        ///</summary>
        partial void CustomInitialize();
        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            Api = new Api(this);
            ApiRevision = new ApiRevision(this);
            ApiRelease = new ApiRelease(this);
            ApiOperation = new ApiOperation(this);
            ApiOperationPolicy = new ApiOperationPolicy(this);
            Tag = new Tag(this);
            ApiProduct = new ApiProduct(this);
            ApiPolicy = new ApiPolicy(this);
            ApiSchema = new ApiSchema(this);
            ApiDiagnostic = new ApiDiagnostic(this);
            ApiIssue = new ApiIssue(this);
            ApiIssueComment = new ApiIssueComment(this);
            ApiIssueAttachment = new ApiIssueAttachment(this);
            ApiTagDescription = new ApiTagDescription(this);
            Operation = new OperationOperations(this);
            ApiExport = new ApiExport(this);
            ApiVersionSet = new ApiVersionSet(this);
            AuthorizationServer = new AuthorizationServer(this);
            Backend = new Backend(this);
            Cache = new Cache(this);
            Certificate = new Certificate(this);
            ContentType = new ContentType(this);
            ContentTypes = new ContentTypes(this);
            ContentItem = new ContentItem(this);
            ApiManagementOperations = new ApiManagementOperations(this);
            ApiManagementServiceSkus = new ApiManagementServiceSkus(this);
            ApiManagementService = new ApiManagementService(this);
            Diagnostic = new Diagnostic(this);
            EmailTemplate = new EmailTemplate(this);
            Gateway = new Gateway(this);
            GatewayHostnameConfiguration = new GatewayHostnameConfiguration(this);
            GatewayApi = new GatewayApi(this);
            Group = new Group(this);
            GroupUser = new GroupUser(this);
            IdentityProvider = new IdentityProvider(this);
            Issue = new Issue(this);
            Logger = new Logger(this);
            NamedValue = new NamedValue(this);
            NetworkStatus = new NetworkStatus(this);
            Notification = new Notification(this);
            NotificationRecipientUser = new NotificationRecipientUser(this);
            NotificationRecipientEmail = new NotificationRecipientEmail(this);
            OpenIdConnectProvider = new OpenIdConnectProvider(this);
            Policy = new Policy(this);
            PolicyDescription = new PolicyDescription(this);
            SignInSettings = new SignInSettings(this);
            SignUpSettings = new SignUpSettings(this);
            DelegationSettings = new DelegationSettings(this);
            Product = new Product(this);
            ProductApi = new ProductApi(this);
            ProductGroup = new ProductGroup(this);
            ProductSubscriptions = new ProductSubscriptions(this);
            ProductPolicy = new ProductPolicy(this);
            QuotaByCounterKeys = new QuotaByCounterKeys(this);
            QuotaByPeriodKeys = new QuotaByPeriodKeys(this);
            Region = new Region(this);
            Reports = new Reports(this);
            Subscription = new Subscription(this);
            TagResource = new TagResource(this);
            TenantAccess = new TenantAccess(this);
            TenantAccessGit = new TenantAccessGit(this);
            TenantConfiguration = new TenantConfiguration(this);
            User = new User(this);
            UserGroup = new UserGroup(this);
            UserSubscription = new UserSubscription(this);
            UserIdentities = new UserIdentities(this);
            UserConfirmationPassword = new UserConfirmationPassword(this);
            BaseUri = new System.Uri("https://management.azure.com");
            SerializationSettings = new JsonSerializerSettings
            {
                Formatting = Newtonsoft.Json.Formatting.Indented,
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new  List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            SerializationSettings.Converters.Add(new TransformationJsonConverter());
            DeserializationSettings = new JsonSerializerSettings
            {
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            CustomInitialize();
            DeserializationSettings.Converters.Add(new TransformationJsonConverter());
        }
    }
}

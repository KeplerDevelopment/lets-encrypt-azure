// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Apimanagement
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Subscription.
    /// </summary>
    public static partial class SubscriptionExtensions
    {
            /// <summary>
            /// Lists all subscriptions of the API Management service instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='filter'>
            /// |   Field     |     Usage     |     Supported operators     |     Supported
            /// functions
            /// |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;|
            /// name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
            /// endswith | &lt;/br&gt;| displayName | filter | ge, le, eq, ne, gt, lt |
            /// substringof, contains, startswith, endswith | &lt;/br&gt;| stateComment |
            /// filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
            /// endswith | &lt;/br&gt;| ownerId | filter | ge, le, eq, ne, gt, lt |
            /// substringof, contains, startswith, endswith | &lt;/br&gt;| scope | filter |
            /// ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
            /// &lt;/br&gt;| userId | filter | ge, le, eq, ne, gt, lt | substringof,
            /// contains, startswith, endswith | &lt;/br&gt;| productId | filter | ge, le,
            /// eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;|
            /// state | filter | eq |     | &lt;/br&gt;| user | expand |     |     |
            /// &lt;/br&gt;
            /// </param>
            /// <param name='top'>
            /// Number of records to return.
            /// </param>
            /// <param name='skip'>
            /// Number of records to skip.
            /// </param>
            public static SubscriptionCollection List(this ISubscription operations, string resourceGroupName, string serviceName, string filter = default(string), int? top = default(int?), int? skip = default(int?))
            {
                return operations.ListAsync(resourceGroupName, serviceName, filter, top, skip).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all subscriptions of the API Management service instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='filter'>
            /// |   Field     |     Usage     |     Supported operators     |     Supported
            /// functions
            /// |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;|
            /// name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
            /// endswith | &lt;/br&gt;| displayName | filter | ge, le, eq, ne, gt, lt |
            /// substringof, contains, startswith, endswith | &lt;/br&gt;| stateComment |
            /// filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
            /// endswith | &lt;/br&gt;| ownerId | filter | ge, le, eq, ne, gt, lt |
            /// substringof, contains, startswith, endswith | &lt;/br&gt;| scope | filter |
            /// ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |
            /// &lt;/br&gt;| userId | filter | ge, le, eq, ne, gt, lt | substringof,
            /// contains, startswith, endswith | &lt;/br&gt;| productId | filter | ge, le,
            /// eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;|
            /// state | filter | eq |     | &lt;/br&gt;| user | expand |     |     |
            /// &lt;/br&gt;
            /// </param>
            /// <param name='top'>
            /// Number of records to return.
            /// </param>
            /// <param name='skip'>
            /// Number of records to skip.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SubscriptionCollection> ListAsync(this ISubscription operations, string resourceGroupName, string serviceName, string filter = default(string), int? top = default(int?), int? skip = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, serviceName, filter, top, skip, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the entity state (Etag) version of the apimanagement subscription
            /// specified by its identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='sid'>
            /// Subscription entity Identifier. The entity represents the association
            /// between a user and a product in API Management.
            /// </param>
            public static SubscriptionGetEntityTagHeaders GetEntityTag(this ISubscription operations, string resourceGroupName, string serviceName, string sid)
            {
                return operations.GetEntityTagAsync(resourceGroupName, serviceName, sid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the entity state (Etag) version of the apimanagement subscription
            /// specified by its identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='sid'>
            /// Subscription entity Identifier. The entity represents the association
            /// between a user and a product in API Management.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SubscriptionGetEntityTagHeaders> GetEntityTagAsync(this ISubscription operations, string resourceGroupName, string serviceName, string sid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEntityTagWithHttpMessagesAsync(resourceGroupName, serviceName, sid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Gets the specified Subscription entity.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='sid'>
            /// Subscription entity Identifier. The entity represents the association
            /// between a user and a product in API Management.
            /// </param>
            public static SubscriptionContract Get(this ISubscription operations, string resourceGroupName, string serviceName, string sid)
            {
                return operations.GetAsync(resourceGroupName, serviceName, sid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the specified Subscription entity.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='sid'>
            /// Subscription entity Identifier. The entity represents the association
            /// between a user and a product in API Management.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SubscriptionContract> GetAsync(this ISubscription operations, string resourceGroupName, string serviceName, string sid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, serviceName, sid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates the subscription of specified user to the specified
            /// product.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='sid'>
            /// Subscription entity Identifier. The entity represents the association
            /// between a user and a product in API Management.
            /// </param>
            /// <param name='parameters'>
            /// Create parameters.
            /// </param>
            /// <param name='notify'>
            /// Notify change in Subscription State.
            /// - If false, do not send any email notification for change of state of
            /// subscription
            /// - If true, send email notification of change of state of subscription
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the Entity. Not required when creating an entity, but required when
            /// updating an entity.
            /// </param>
            /// <param name='appType'>
            /// Determines the type of application which send the create user request.
            /// Default is legacy publisher portal. Possible values include: 'portal',
            /// 'developerPortal'
            /// </param>
            public static SubscriptionContract CreateOrUpdate(this ISubscription operations, string resourceGroupName, string serviceName, string sid, SubscriptionCreateParameters parameters, bool? notify = default(bool?), string ifMatch = default(string), string appType = default(string))
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, serviceName, sid, parameters, notify, ifMatch, appType).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates the subscription of specified user to the specified
            /// product.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='sid'>
            /// Subscription entity Identifier. The entity represents the association
            /// between a user and a product in API Management.
            /// </param>
            /// <param name='parameters'>
            /// Create parameters.
            /// </param>
            /// <param name='notify'>
            /// Notify change in Subscription State.
            /// - If false, do not send any email notification for change of state of
            /// subscription
            /// - If true, send email notification of change of state of subscription
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the Entity. Not required when creating an entity, but required when
            /// updating an entity.
            /// </param>
            /// <param name='appType'>
            /// Determines the type of application which send the create user request.
            /// Default is legacy publisher portal. Possible values include: 'portal',
            /// 'developerPortal'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SubscriptionContract> CreateOrUpdateAsync(this ISubscription operations, string resourceGroupName, string serviceName, string sid, SubscriptionCreateParameters parameters, bool? notify = default(bool?), string ifMatch = default(string), string appType = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, serviceName, sid, parameters, notify, ifMatch, appType, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the details of a subscription specified by its identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='sid'>
            /// Subscription entity Identifier. The entity represents the association
            /// between a user and a product in API Management.
            /// </param>
            /// <param name='parameters'>
            /// Update parameters.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the Entity. ETag should match the current entity state from the
            /// header response of the GET request or it should be * for unconditional
            /// update.
            /// </param>
            /// <param name='notify'>
            /// Notify change in Subscription State.
            /// - If false, do not send any email notification for change of state of
            /// subscription
            /// - If true, send email notification of change of state of subscription
            /// </param>
            /// <param name='appType'>
            /// Determines the type of application which send the create user request.
            /// Default is legacy publisher portal. Possible values include: 'portal',
            /// 'developerPortal'
            /// </param>
            public static void Update(this ISubscription operations, string resourceGroupName, string serviceName, string sid, SubscriptionUpdateParameters parameters, string ifMatch, bool? notify = default(bool?), string appType = default(string))
            {
                operations.UpdateAsync(resourceGroupName, serviceName, sid, parameters, ifMatch, notify, appType).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the details of a subscription specified by its identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='sid'>
            /// Subscription entity Identifier. The entity represents the association
            /// between a user and a product in API Management.
            /// </param>
            /// <param name='parameters'>
            /// Update parameters.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the Entity. ETag should match the current entity state from the
            /// header response of the GET request or it should be * for unconditional
            /// update.
            /// </param>
            /// <param name='notify'>
            /// Notify change in Subscription State.
            /// - If false, do not send any email notification for change of state of
            /// subscription
            /// - If true, send email notification of change of state of subscription
            /// </param>
            /// <param name='appType'>
            /// Determines the type of application which send the create user request.
            /// Default is legacy publisher portal. Possible values include: 'portal',
            /// 'developerPortal'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateAsync(this ISubscription operations, string resourceGroupName, string serviceName, string sid, SubscriptionUpdateParameters parameters, string ifMatch, bool? notify = default(bool?), string appType = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateWithHttpMessagesAsync(resourceGroupName, serviceName, sid, parameters, ifMatch, notify, appType, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Deletes the specified subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='sid'>
            /// Subscription entity Identifier. The entity represents the association
            /// between a user and a product in API Management.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the Entity. ETag should match the current entity state from the
            /// header response of the GET request or it should be * for unconditional
            /// update.
            /// </param>
            public static void Delete(this ISubscription operations, string resourceGroupName, string serviceName, string sid, string ifMatch)
            {
                operations.DeleteAsync(resourceGroupName, serviceName, sid, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='sid'>
            /// Subscription entity Identifier. The entity represents the association
            /// between a user and a product in API Management.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the Entity. ETag should match the current entity state from the
            /// header response of the GET request or it should be * for unconditional
            /// update.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this ISubscription operations, string resourceGroupName, string serviceName, string sid, string ifMatch, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, serviceName, sid, ifMatch, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Regenerates primary key of existing subscription of the API Management
            /// service instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='sid'>
            /// Subscription entity Identifier. The entity represents the association
            /// between a user and a product in API Management.
            /// </param>
            public static void RegeneratePrimaryKey(this ISubscription operations, string resourceGroupName, string serviceName, string sid)
            {
                operations.RegeneratePrimaryKeyAsync(resourceGroupName, serviceName, sid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Regenerates primary key of existing subscription of the API Management
            /// service instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='sid'>
            /// Subscription entity Identifier. The entity represents the association
            /// between a user and a product in API Management.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RegeneratePrimaryKeyAsync(this ISubscription operations, string resourceGroupName, string serviceName, string sid, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RegeneratePrimaryKeyWithHttpMessagesAsync(resourceGroupName, serviceName, sid, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Regenerates secondary key of existing subscription of the API Management
            /// service instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='sid'>
            /// Subscription entity Identifier. The entity represents the association
            /// between a user and a product in API Management.
            /// </param>
            public static void RegenerateSecondaryKey(this ISubscription operations, string resourceGroupName, string serviceName, string sid)
            {
                operations.RegenerateSecondaryKeyAsync(resourceGroupName, serviceName, sid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Regenerates secondary key of existing subscription of the API Management
            /// service instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='sid'>
            /// Subscription entity Identifier. The entity represents the association
            /// between a user and a product in API Management.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RegenerateSecondaryKeyAsync(this ISubscription operations, string resourceGroupName, string serviceName, string sid, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RegenerateSecondaryKeyWithHttpMessagesAsync(resourceGroupName, serviceName, sid, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the subscription keys.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='sid'>
            /// Subscription entity Identifier. The entity represents the association
            /// between a user and a product in API Management.
            /// </param>
            public static SubscriptionKeysContract ListSecrets(this ISubscription operations, string resourceGroupName, string serviceName, string sid)
            {
                return operations.ListSecretsAsync(resourceGroupName, serviceName, sid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the subscription keys.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='sid'>
            /// Subscription entity Identifier. The entity represents the association
            /// between a user and a product in API Management.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SubscriptionKeysContract> ListSecretsAsync(this ISubscription operations, string resourceGroupName, string serviceName, string sid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSecretsWithHttpMessagesAsync(resourceGroupName, serviceName, sid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
